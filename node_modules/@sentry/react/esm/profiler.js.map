{"version":3,"file":"profiler.js","sourceRoot":"","sources":["../src/profiler.tsx"],"names":[],"mappings":"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","sourcesContent":["import { getCurrentHub } from '@sentry/browser';\nimport { Integration, IntegrationClass, Span } from '@sentry/types';\nimport { logger, timestampWithMs } from '@sentry/utils';\nimport * as hoistNonReactStatic from 'hoist-non-react-statics';\nimport * as React from 'react';\n\nexport const UNKNOWN_COMPONENT = 'unknown';\n\nconst TRACING_GETTER = ({\n  id: 'Tracing',\n} as any) as IntegrationClass<Integration>;\n\nlet globalTracingIntegration: Integration | null = null;\nconst getTracingIntegration = () => {\n  if (globalTracingIntegration) {\n    return globalTracingIntegration;\n  }\n\n  globalTracingIntegration = getCurrentHub().getIntegration(TRACING_GETTER);\n  return globalTracingIntegration;\n};\n\n/**\n * Warn if tracing integration not configured. Will only warn once.\n */\nfunction warnAboutTracing(name: string): void {\n  if (globalTracingIntegration === null) {\n    logger.warn(\n      `Unable to profile component ${name} due to invalid Tracing Integration. Please make sure the Tracing integration is setup properly.`,\n    );\n  }\n}\n\n/**\n * pushActivity creates an new react activity.\n * Is a no-op if Tracing integration is not valid\n * @param name displayName of component that started activity\n */\nfunction pushActivity(name: string, op: string): number | null {\n  if (globalTracingIntegration === null) {\n    return null;\n  }\n\n  // tslint:disable-next-line:no-unsafe-any\n  return (globalTracingIntegration as any).constructor.pushActivity(name, {\n    description: `<${name}>`,\n    op: `react.${op}`,\n  });\n}\n\n/**\n * popActivity removes a React activity.\n * Is a no-op if Tracing integration is not valid.\n * @param activity id of activity that is being popped\n */\nfunction popActivity(activity: number | null): void {\n  if (activity === null || globalTracingIntegration === null) {\n    return;\n  }\n\n  // tslint:disable-next-line:no-unsafe-any\n  (globalTracingIntegration as any).constructor.popActivity(activity);\n}\n\n/**\n * Obtain a span given an activity id.\n * Is a no-op if Tracing integration is not valid.\n * @param activity activity id associated with obtained span\n */\nfunction getActivitySpan(activity: number | null): Span | undefined {\n  if (activity === null || globalTracingIntegration === null) {\n    return undefined;\n  }\n\n  // tslint:disable-next-line:no-unsafe-any\n  return (globalTracingIntegration as any).constructor.getActivitySpan(activity) as Span | undefined;\n}\n\nexport type ProfilerProps = {\n  // The name of the component being profiled.\n  name: string;\n  // If the Profiler is disabled. False by default. This is useful if you want to disable profilers\n  // in certain environments.\n  disabled?: boolean;\n  // If time component is on page should be displayed as spans. True by default.\n  includeRender?: boolean;\n  // If component updates should be displayed as spans. True by default.\n  includeUpdates?: boolean;\n  // props given to component being profiled.\n  updateProps: { [key: string]: any };\n};\n\n/**\n * The Profiler component leverages Sentry's Tracing integration to generate\n * spans based on component lifecycles.\n */\nclass Profiler extends React.Component<ProfilerProps> {\n  // The activity representing how long it takes to mount a component.\n  public mountActivity: number | null = null;\n  // The span of the mount activity\n  public mountSpan: Span | undefined = undefined;\n  // The span of the render\n  public renderSpan: Span | undefined = undefined;\n\n  public static defaultProps: Partial<ProfilerProps> = {\n    disabled: false,\n    includeRender: true,\n    includeUpdates: true,\n  };\n\n  public constructor(props: ProfilerProps) {\n    super(props);\n    const { name, disabled = false } = this.props;\n\n    if (disabled) {\n      return;\n    }\n\n    if (getTracingIntegration()) {\n      this.mountActivity = pushActivity(name, 'mount');\n    } else {\n      warnAboutTracing(name);\n    }\n  }\n\n  // If a component mounted, we can finish the mount activity.\n  public componentDidMount(): void {\n    this.mountSpan = getActivitySpan(this.mountActivity);\n    popActivity(this.mountActivity);\n    this.mountActivity = null;\n  }\n\n  public componentDidUpdate({ updateProps, includeUpdates = true }: ProfilerProps): void {\n    // Only generate an update span if hasUpdateSpan is true, if there is a valid mountSpan,\n    // and if the updateProps have changed. It is ok to not do a deep equality check here as it is expensive.\n    // We are just trying to give baseline clues for further investigation.\n    if (includeUpdates && this.mountSpan && updateProps !== this.props.updateProps) {\n      // See what props haved changed between the previous props, and the current props. This is\n      // set as data on the span. We just store the prop keys as the values could be potenially very large.\n      const changedProps = Object.keys(updateProps).filter(k => updateProps[k] !== this.props.updateProps[k]);\n      if (changedProps.length > 0) {\n        // The update span is a point in time span with 0 duration, just signifying that the component\n        // has been updated.\n        const now = timestampWithMs();\n        this.mountSpan.startChild({\n          data: {\n            changedProps,\n          },\n          description: `<${this.props.name}>`,\n          endTimestamp: now,\n          op: `react.update`,\n          startTimestamp: now,\n        });\n      }\n    }\n  }\n\n  // If a component is unmounted, we can say it is no longer on the screen.\n  // This means we can finish the span representing the component render.\n  public componentWillUnmount(): void {\n    const { name, includeRender = true } = this.props;\n\n    if (this.mountSpan && includeRender) {\n      // If we were able to obtain the spanId of the mount activity, we should set the\n      // next activity as a child to the component mount activity.\n      this.mountSpan.startChild({\n        description: `<${name}>`,\n        endTimestamp: timestampWithMs(),\n        op: `react.render`,\n        startTimestamp: this.mountSpan.endTimestamp,\n      });\n    }\n  }\n\n  public render(): React.ReactNode {\n    return this.props.children;\n  }\n}\n\n/**\n * withProfiler is a higher order component that wraps a\n * component in a {@link Profiler} component. It is recommended that\n * the higher order component be used over the regular {@link Profiler} component.\n *\n * @param WrappedComponent component that is wrapped by Profiler\n * @param options the {@link ProfilerProps} you can pass into the Profiler\n */\nfunction withProfiler<P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n  // We do not want to have `updateProps` given in options, it is instead filled through the HOC.\n  options?: Pick<Partial<ProfilerProps>, Exclude<keyof ProfilerProps, 'updateProps'>>,\n): React.FC<P> {\n  const componentDisplayName =\n    (options && options.name) || WrappedComponent.displayName || WrappedComponent.name || UNKNOWN_COMPONENT;\n\n  const Wrapped: React.FC<P> = (props: P) => (\n    <Profiler {...options} name={componentDisplayName} updateProps={props}>\n      <WrappedComponent {...props} />\n    </Profiler>\n  );\n\n  Wrapped.displayName = `profiler(${componentDisplayName})`;\n\n  // Copy over static methods from Wrapped component to Profiler HOC\n  // See: https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over\n  hoistNonReactStatic(Wrapped, WrappedComponent);\n  return Wrapped;\n}\n\n/**\n *\n * `useProfiler` is a React hook that profiles a React component.\n *\n * Requires React 16.8 or above.\n * @param name displayName of component being profiled\n */\nfunction useProfiler(\n  name: string,\n  options: { disabled?: boolean; hasRenderSpan?: boolean } = {\n    disabled: false,\n    hasRenderSpan: true,\n  },\n): void {\n  const [mountActivity] = React.useState(() => {\n    if (options && options.disabled) {\n      return null;\n    }\n\n    if (getTracingIntegration()) {\n      return pushActivity(name, 'mount');\n    }\n\n    warnAboutTracing(name);\n    return null;\n  });\n\n  React.useEffect(() => {\n    const mountSpan = getActivitySpan(mountActivity);\n    popActivity(mountActivity);\n\n    return () => {\n      if (mountSpan && options.hasRenderSpan) {\n        mountSpan.startChild({\n          description: `<${name}>`,\n          endTimestamp: timestampWithMs(),\n          op: `react.render`,\n          startTimestamp: mountSpan.endTimestamp,\n        });\n      }\n    };\n  }, []);\n}\n\nexport { withProfiler, Profiler, useProfiler };\n"]}